// glosbeTranslator.js - –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å Glosbe –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Ö –≤ Firebase
// –í–µ—Ä—Å–∏—è –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ (–±–µ–∑ ES –º–æ–¥—É–ª–µ–π)

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Firebase, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –≤ index.html
// –ó–∞–≥—Ä—É–∑–∫–∞ CzechNormalizationRules –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–ø—Ç –≤ index.html

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
const czechNormalizer = new CzechNormalizationRules();

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Firebase
const dbRef = function(path) {
  return firebase.database().ref(path);
};

const setData = function(ref, data) {
  return ref.set(data);
};

const getData = function(ref) {
  return ref.once('value').then(snapshot => snapshot.val());
};

/**
 * –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
 */
const localCache = {
  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
   * @param {string} word - –°–ª–æ–≤–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
   * @param {Object} data - –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥–∞
   */
  save: function(word, data) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫—ç—à –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
      const cacheKey = 'flashcards_seznam_cache';
      let cache = JSON.parse(localStorage.getItem(cacheKey) || '{}');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      cache[word.toLowerCase()] = {
        ...data,
        cachedAt: new Date().toISOString()
      };
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ (30 –¥–Ω–µ–π –∏–ª–∏ 500 —Å–ª–æ–≤)
      const now = new Date();
      const entries = Object.entries(cache);
      
      // –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      const filteredEntries = entries
        .filter(([_, entry]) => {
          const cachedAt = new Date(entry.cachedAt);
          const diffDays = (now - cachedAt) / (1000 * 60 * 60 * 24);
          return diffDays < 30; // –•—Ä–∞–Ω–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 30 –¥–Ω–µ–π
        })
        .sort((a, b) => new Date(b[1].cachedAt) - new Date(a[1].cachedAt))
        .slice(0, 500); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 500 —Å–ª–æ–≤–∞–º–∏
      
      // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫—ç—à
      const updatedCache = Object.fromEntries(filteredEntries);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
      localStorage.setItem(cacheKey, JSON.stringify(updatedCache));
      
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à:', error);
      return false;
    }
  },
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
   * @param {string} word - –°–ª–æ–≤–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
   * @returns {Object|null} - –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–ª–∏ null
   */
  get: function(word) {
    try {
      const cacheKey = 'flashcards_seznam_cache';
      const cache = JSON.parse(localStorage.getItem(cacheKey) || '{}');
      return cache[word.toLowerCase()] || null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞:', error);
      return null;
    }
  },
  
  /**
   * –û—á–∏—â–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
   */
  clear: function() {
    try {
      localStorage.removeItem('flashcards_seznam_cache');
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞:', error);
      return false;
    }
  }
};

/**
 * –ü–∞—Ä—Å–∏—Ç HTML-—Å—Ç—Ä–æ–∫—É –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥–∞
 * @param {string} htmlContent - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ HTML-—Ñ–∞–π–ª–∞
 * @param {string} word - –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–ª–æ–≤–æ
 * @returns {Object} - –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
 */
function parseHtmlContent(htmlContent, word, from_lang = 'cs', to_lang = 'ru') {
  // –°–æ–∑–¥–∞–µ–º DOM-–ø–∞—Ä—Å–µ—Ä
  const parser = new DOMParser();
  const doc = parser.parseFromString(htmlContent, 'text/html');
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
  const translations = [];
  
  // –ú–µ—Ç–æ–¥ 1: –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
  const translationItems = doc.querySelectorAll('li.translation__item');
  translationItems.forEach(item => {
    const wordElement = item.querySelector('.translation__item__pharse');
    if (wordElement) {
      const text = wordElement.textContent.trim();
      if (text && !translations.includes(text)) {
        translations.push(text);
      }
    }
  });
  
  // –ú–µ—Ç–æ–¥ 2: –ú–µ–Ω–µ–µ —á–∞—Å—Ç—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
  const lessFrequentContainer = doc.querySelector('#less-frequent-translations-container-0');
  if (lessFrequentContainer) {
    const items = lessFrequentContainer.querySelectorAll('li');
    items.forEach(item => {
      const text = item.textContent.trim();
      if (text && !translations.includes(text)) {
        translations.push(text);
      }
    });
  }
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  const samples = [];
  const exampleItems = doc.querySelectorAll('.translation__example');
  
  exampleItems.forEach(example => {
    const csText = example.querySelector('[lang="cs"]');
    const ruText = example.querySelector('.w-1/2.px-1.ml-2');
    
    if (csText && ruText) {
      samples.push({
        phrase: csText.textContent.trim(),
        translation: ruText.textContent.trim()
      });
    }
  });
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø—Ä–∏–º–µ—Ä—ã –≤ –ø–µ—Ä–≤–æ–º –±–ª–æ–∫–µ, –∏—â–µ–º –≤ –±–ª–æ–∫–µ TM
  if (samples.length === 0) {
    const tmExamples = doc.querySelectorAll('#tmem_first_examples .odd\\:bg-slate-100');
    tmExamples.forEach(example => {
      const csText = example.querySelector('.w-1/2.dir-aware-pr-1');
      const ruText = example.querySelector('.w-1/2.dir-aware-pl-1');
      
      if (csText && ruText) {
        samples.push({
          phrase: csText.textContent.trim(),
          translation: ruText.textContent.trim()
        });
      }
    });
  }
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  return {
    word: word,
    from_lang: from_lang,
    to_lang: to_lang,
    translations: translations,
    samples: samples.slice(0, 3), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤
    source: 'glosbe',
    timestamp: new Date().toISOString()
  };
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö HTML-—Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–ª–æ–≤–∞
 * @param {string} word - –°–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞
 * @param {string} from_lang - –ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫
 * @param {string} to_lang - –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫
 * @returns {Promise<Object|null>} - –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–ª–∏ null, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
 */
async function checkLocalHtmlFiles(word, from_lang = 'cs', to_lang = 'ru') {
  try {
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ –Ω–∞—à–µ–º—É API
    const response = await fetch(`/api/translate?word=${encodeURIComponent(word)}&from=${from_lang}&to=${to_lang}&checkLocal=true`);
    
    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: ${response.status}`);
    }
    
    const data = await response.json();
    
    // –ï—Å–ª–∏ API –Ω–∞—à–µ–ª –∏ –æ–±—Ä–∞–±–æ—Ç–∞–ª –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    if (data.success && data.translations && data.translations.fromLocalFile) {
      console.log(`–ù–∞–π–¥–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π HTML-—Ñ–∞–π–ª –¥–ª—è —Å–ª–æ–≤–∞ "${word}"`);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
      const result = {
        word: word,
        translations: data.translations.directTranslations.map(t => t.text),
        samples: data.translations.examples.slice(0, 3).map(e => ({
          phrase: e.original,
          translation: e.translated
        })),
        source: 'glosbe',
        timestamp: new Date().toISOString(),
        fromLocalFile: true
      };
      
      return result;
    }
    
    return null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö HTML-—Ñ–∞–π–ª–æ–≤:', error);
    return null;
  }
}

/**
 * –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–ï–†–ï–í–û–î–ê –° –ü–û–õ–ù–û–ô –°–ò–°–¢–ï–ú–û–ô –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ —Å —Å–∞–π—Ç–∞ Glosbe —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–∞–≤–∏–ª –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
 * @param {string} word - –°–ª–æ–≤–æ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
 * @returns {Promise<Object>} - –û–±—ä–µ–∫—Ç —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏
 */
async function fetchTranslation(word) {
  if (!word) return null;
  
  console.log(`\n=== üîç –û–ë–†–ê–ë–û–¢–ö–ê –°–õ–û–í–ê: "${word}" ===`);

  // –ö—ç—à –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
  if (!window.translationsCache) {
    window.translationsCache = {};
  }
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–π –∫—ç—à
  if (window.translationsCache[word]) {
    console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è "' + word + '"');
    return window.translationsCache[word];
  }
  
  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
  try {
    const localData = localCache.get(word);
    if (localData) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫—ç—à–µ –¥–ª—è "' + word + '"');
      window.translationsCache[word] = localData;
      return localData;
    }
  } catch (localError) {
    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞:', localError);
  }
  
  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º Firebase
  try {
    let cloudTranslation = await getFromCloudDictionary(word);
    if (cloudTranslation) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ –≤ –æ–±–ª–∞—á–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ –¥–ª—è "' + word + '"');
      window.translationsCache[word] = cloudTranslation;
      localCache.save(word, cloudTranslation);
      return cloudTranslation;
    }
  } catch (dbError) {
    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑ Firebase:', dbError);
  }

  // 4. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ API
  try {
    console.log(`üîç –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞: "${word}" —á–µ—Ä–µ–∑ API`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ HTML-—Ñ–∞–π–ª—ã
    let localHtmlResult = null;
    try {
      localHtmlResult = await checkLocalHtmlFiles(word, 'cs', 'ru');
    } catch (htmlError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö HTML-—Ñ–∞–π–ª–æ–≤:', htmlError);
    }
    
    if (localHtmlResult && localHtmlResult.success) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö HTML-—Ñ–∞–π–ª–∞—Ö –¥–ª—è "' + word + '"');
      const result = {
        word: word,
        originalWord: word,
        normalizedWord: word,
        usedNormalization: false,
        translations: localHtmlResult.translations,
        success: true,
        source: 'local-html'
      };
      window.translationsCache[word] = result;
      localCache.save(word, result);
      saveToCloudDictionary(word, result);
      return result;
    }
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ API
    const API_URL = window.location.hostname === 'localhost'
      ? 'http://localhost:3001'
      : 'https://flashcards-seznam-production.up.railway.app';
      
    const response = await fetch(`${API_URL}/api/translate?word=${encodeURIComponent(word)}&from=cs&to=ru`, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      signal: AbortSignal.timeout ? AbortSignal.timeout(30000) : undefined
    });
    
    if (response.ok) {
      const data = await response.json();
      
      if (data.success && data.translations &&
        (data.translations.translations && data.translations.translations.length > 0 ||
         data.translations.length > 0)) {
        
        const result = {
          word: word,
          originalWord: word,
          normalizedWord: word,
          usedNormalization: false,
          translations: data.translations,
          success: true,
          source: 'api'
        };
        
        window.translationsCache[word] = result;
        localCache.save(word, result);
        saveToCloudDictionary(word, result);
        return result;
      }
    }
  } catch (apiError) {
    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ API –¥–ª—è "' + word + '":', apiError);
  }
  
  // 5. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞, –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é
  console.log('üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–ª–Ω—É—é —Å–∏—Å—Ç–µ–º—É –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏...');
  const allVariants = czechNormalizer.normalize(word);
  console.log(`üìù –í–∞—Ä–∏–∞–Ω—Ç—ã –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è "${word}": [${allVariants.join(', ')}]`);
  
  // –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, —Ç–∞–∫ –∫–∞–∫ –º—ã —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –µ–≥–æ
  const normalizedVariants = allVariants.filter(variant => variant !== word);
  
  // 6. –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
  for (const wordToTry of normalizedVariants) {
    try {
      console.log(`üîç –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: "${wordToTry}"`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
      if (window.translationsCache[wordToTry]) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è "' + wordToTry + '"');
        const result = { ...window.translationsCache[wordToTry] };
        result.originalWord = word;
        result.normalizedWord = wordToTry;
        result.normalizedVariants = allVariants;
        result.usedNormalization = wordToTry !== word;
        window.translationsCache[word] = result;
        return result;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º Firebase –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
      try {
        let cloudTranslation = await getFromCloudDictionary(wordToTry);
        if (cloudTranslation) {
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ –≤ –æ–±–ª–∞—á–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ –¥–ª—è "' + wordToTry + '"');
          const result = { ...cloudTranslation };
          result.originalWord = word;
          result.normalizedWord = wordToTry;
          result.normalizedVariants = allVariants;
          result.usedNormalization = wordToTry !== word;
          window.translationsCache[word] = result;
          window.translationsCache[wordToTry] = result;
          return result;
        }
      } catch (dbError) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑ Firebase –¥–ª—è "' + wordToTry + '":', dbError);
      }

      // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ HTML-—Ñ–∞–π–ª—ã
      try {
        const localFileData = await checkLocalHtmlFiles(wordToTry);
        if (localFileData) {
          console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π HTML-—Ñ–∞–π–ª –¥–ª—è —Å–ª–æ–≤–∞ "' + wordToTry + '"');
          
          const result = { ...localFileData };
          result.originalWord = word;
          result.normalizedWord = wordToTry;
          result.normalizedVariants = allVariants;
          result.usedNormalization = wordToTry !== word;
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
          window.translationsCache[word] = result;
          localCache.save(word, result);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
          try {
            await saveToCloudDictionary(result);
          } catch (saveError) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Firebase:', saveError);
          }
          
          return result;
        }
      } catch (localFileError) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:', localFileError);
      }

      // 7. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ API
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å /api/ –¥–ª—è –ø—Ä–æ–∫—Å–∏-—Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –Ω–∞ Netlify
      const API_URL = window.location.hostname === 'localhost'
        ? 'http://localhost:3001'
        : '';  // –ü—É—Å—Ç–æ–π URL –æ–∑–Ω–∞—á–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏

      try {
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ URL –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const apiUrl = `/api/translate?word=${encodeURIComponent(wordToTry)}&from=cs&to=ru`;
        console.log(`üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫: ${apiUrl}`);
        
        const response = await fetch(apiUrl, {
          method: 'GET',
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          },
          signal: AbortSignal.timeout ? AbortSignal.timeout(30000) : undefined
        });

        if (response.ok) {
          // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON
          let data;
          try {
            const responseText = await response.text();
            console.log(`‚ÑπÔ∏è –û—Ç–≤–µ—Ç –æ—Ç API: ${responseText.substring(0, 100)}...`);
            data = JSON.parse(responseText);
          } catch (jsonError) {
            console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON: ${jsonError.message}`);
            throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API: ${jsonError.message}`);
          }

          if (data.success && data.translations &&
            (data.translations.translations && data.translations.translations.length > 0 ||
              data.translations.samples && data.translations.samples.length > 0)) {

            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ API –¥–ª—è "${wordToTry}"!`);

            const result = {
              word: word,
              originalWord: word,
              normalizedWord: wordToTry,
              normalizedVariants: allVariants,
              usedNormalization: wordToTry !== word,
              translations: data.translations.translations || [],
              samples: data.translations.samples || [],
              source: data.fromCache ? 'local_cache' : 'glosbe_live',
              timestamp: new Date().toISOString()
            };

            // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            window.translationsCache[word] = result;
            window.translationsCache[wordToTry] = result;
            localCache.save(word, result);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
            try {
              await saveToCloudDictionary(result);
            } catch (saveError) {
              console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Firebase:', saveError);
            }

            return result;
          }
        }
      } catch (apiError) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ API –¥–ª—è "${wordToTry}":`, apiError);
      }

      console.log(`‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è "${wordToTry}"`);

    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–µ—Ä–µ–≤–æ–¥–∞ "${wordToTry}":`, error);
    }
  }

  // 8. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –±–∞–∑–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å
  console.log('üîç –ü—Ä–æ–±—É–µ–º –±–∞–∑–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å...');
  for (const variant of allVariants) {
    const basicTranslations = getBasicTranslation(variant);
    if (basicTranslations) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –±–∞–∑–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è "${variant}"`);
      const fallbackResult = {
        word: word,
        originalWord: word,
        normalizedWord: variant,
        normalizedVariants: allVariants,
        usedNormalization: variant !== word,
        translations: basicTranslations,
        samples: [],
        source: 'basic_dict',
        note: '–ë–∞–∑–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ (Glosbe –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)',
        timestamp: new Date().toISOString()
      };

      window.translationsCache[word] = fallbackResult;
      return fallbackResult;
    }
  }

  // 9. –ü–æ–ª–Ω—ã–π fallback
  console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞');
  return {
    word: word,
    originalWord: word,
    normalizedWord: allVariants[1] || word,
    normalizedVariants: allVariants,
    usedNormalization: allVariants.length > 1,
    translations: [],
    samples: [],
    note: `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞: ${allVariants.join(', ')}`,
    timestamp: new Date().toISOString()
  };
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ –≤ Firebase
 * @param {Object} wordData - –î–∞–Ω–Ω—ã–µ –æ —Å–ª–æ–≤–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
 * @returns {Promise<boolean>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function saveToCloudDictionary(wordData) {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞
    const wordKey = wordData.word.toLowerCase();
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä–µ
    try {
      const existingData = await getFromCloudDictionary(wordKey);
      
      if (existingData) {
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω–æ–≤—ã–º–∏
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        const allTranslations = [...new Set([
          ...(existingData.translations || []),
          ...(wordData.translations || [])
        ])];
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        const samplesMap = {};
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∏–º–µ—Ä—ã
        (existingData.samples || []).forEach(sample => {
          const key = `${sample.phrase}|${sample.translation}`;
          samplesMap[key] = sample;
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã
        (wordData.samples || []).forEach(sample => {
          const key = `${sample.phrase}|${sample.translation}`;
          samplesMap[key] = sample;
        });
        
        const allSamples = Object.values(samplesMap);
        
        // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const updatedData = {
          ...existingData,
          translations: allTranslations,
          samples: allSamples,
          lastUpdated: new Date().toISOString()
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await set(ref(database, `dictionary/${wordKey}`), updatedData);
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ
        await set(ref(database, `dictionary/${wordKey}`), {
          ...wordData,
          created: new Date().toISOString(),
          lastUpdated: new Date().toISOString()
        });
      }
    } catch (existingDataError) {
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ
      await set(ref(database, `dictionary/${wordKey}`), {
        ...wordData,
        created: new Date().toISOString(),
        lastUpdated: new Date().toISOString()
      });
    }
    
    console.log(`‚úÖ –°–ª–æ–≤–æ "${wordData.word}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –æ–±–ª–∞—á–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ`);
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –æ–±–ª–∞—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å:', error);
    // –ü—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –æ–¥–∏–Ω —Ä–∞–∑
    try {
      const wordKey = wordData.word.toLowerCase();
      await set(ref(database, `dictionary/${wordKey}`), {
        ...wordData,
        created: new Date().toISOString(),
        lastUpdated: new Date().toISOString(),
        retried: true
      });
      console.log(`‚úÖ –°–ª–æ–≤–æ "${wordData.word}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –æ–±–ª–∞—á–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏`);
      return true;
    } catch (retryError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –æ–±–ª–∞—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å:', retryError);
      return false;
    }
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ –∏–∑ Firebase
 * @param {string} word - –°–ª–æ–≤–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
 * @returns {Promise<Object|null>} - –î–∞–Ω–Ω—ã–µ –æ —Å–ª–æ–≤–µ –∏–ª–∏ null, –µ—Å–ª–∏ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
 */
export async function getFromCloudDictionary(word) {
  if (!word) return null;
  
  try {
    const wordKey = word.toLowerCase();
    const snapshot = await get(ref(database, `dictionary/${wordKey}`));
    
    if (snapshot.exists()) {
      console.log(`‚úÖ –°–ª–æ–≤–æ "${word}" –Ω–∞–π–¥–µ–Ω–æ –≤ –æ–±–ª–∞—á–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ`);
      return snapshot.val();
    } else {
      console.log(`‚ÑπÔ∏è –°–ª–æ–≤–æ "${word}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –æ–±–ª–∞—á–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ`);
      return null;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑ –æ–±–ª–∞—á–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è:', error);
    
    // –ü—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    try {
      await new Promise(resolve => setTimeout(resolve, 1000));
      const wordKey = word.toLowerCase();
      const snapshot = await get(ref(database, `dictionary/${wordKey}`));
      
      if (snapshot.exists()) {
        console.log(`‚úÖ –°–ª–æ–≤–æ "${word}" –Ω–∞–π–¥–µ–Ω–æ –≤ –æ–±–ª–∞—á–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏`);
        return snapshot.val();
      } else {
        return null;
      }
    } catch (retryError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑ –æ–±–ª–∞—á–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è:', retryError);
      return null;
    }
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
 * @returns {Promise<Array>} - –ú–∞—Å—Å–∏–≤ —Å–ª–æ–≤
 */
export async function getEntireDictionary() {
  try {
    const snapshot = await get(ref(database, 'dictionary'));
    
    if (snapshot.exists()) {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
      const dictionary = snapshot.val();
      return Object.values(dictionary);
    } else {
      console.log('‚ÑπÔ∏è –°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç');
      return [];
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è:', error);
    
    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å —á–∞—Å—Ç—è–º–∏
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã –∫–ª—é—á–µ–π
      const firstLettersSnapshot = await get(ref(database, 'dictionary'));
      if (!firstLettersSnapshot.exists()) return [];
      
      const result = [];
      const entries = Object.entries(firstLettersSnapshot.val());
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–ª—é—á –æ—Ç–¥–µ–ª—å–Ω–æ
      for (const [key, value] of entries) {
        try {
          if (typeof value === 'object') {
            result.push(value);
          }
        } catch (entryError) {
          console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ ${key}:`, entryError);
        }
      }
      
      return result;
    } catch (retryError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è:', retryError);
      // –í —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      return [];
    }
  }
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤ JSON-—Ñ–∞–π–ª
 * @param {Array} dictionary - –°–ª–æ–≤–∞—Ä—å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
 */
export function exportDictionaryToJson(dictionary) {
  try {
    const dataStr = JSON.stringify(dictionary, null, 2);
    const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
    
    const exportFileDefaultName = 'czech_dictionary.json';
    
    const linkElement = document.createElement('a');
    linkElement.setAttribute('href', dataUri);
    linkElement.setAttribute('download', exportFileDefaultName);
    linkElement.click();
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Å–ª–æ–≤–∞—Ä—è –≤ JSON:', error);
    
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–±–∏—Ç—å –±–æ–ª—å—à–æ–π —Å–ª–æ–≤–∞—Ä—å –Ω–∞ —á–∞—Å—Ç–∏
    try {
      const chunks = [];
      const chunkSize = 100; // –°–ª–æ–≤ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ
      
      for (let i = 0; i < dictionary.length; i += chunkSize) {
        chunks.push(dictionary.slice(i, i + chunkSize));
      }
      
      // –°–∫–∞—á–∏–≤–∞–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
      chunks.forEach((chunk, index) => {
        const chunkStr = JSON.stringify(chunk, null, 2);
        const chunkUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(chunkStr);
        
        const filename = `czech_dictionary_part${index + 1}.json`;
        
        const link = document.createElement('a');
        link.setAttribute('href', chunkUri);
        link.setAttribute('download', filename);
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–∞–≥—Ä—É–∑–æ–∫
        setTimeout(() => link.click(), index * 1000);
      });
      
      return true;
    } catch (retryError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —á–∞—Å—Ç–µ–π —Å–ª–æ–≤–∞—Ä—è:', retryError);
      return false;
    }
  }
}

/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –±–∞–∑–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è fallback
 */
function getBasicTranslation(word) {
  const basicDict = {
    // –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è
    'n√°≈°': ['–Ω–∞—à', '–Ω–∞—à–∞', '–Ω–∞—à–µ'],
    'v√°≈°': ['–≤–∞—à', '–≤–∞—à–∞', '–≤–∞—à–µ'],
    'm≈Øj': ['–º–æ–π', '–º–æ—è', '–º–æ—ë'],
    'tv≈Øj': ['—Ç–≤–æ–π', '—Ç–≤–æ—è', '—Ç–≤–æ—ë'],
    'jeho': ['–µ–≥–æ'],
    'jej√≠': ['–µ—ë'],
    'jejich': ['–∏—Ö'],
    'ten': ['—Ç–æ—Ç', '—ç—Ç–æ—Ç'],
    'tento': ['—ç—Ç–æ—Ç'],
    'on': ['–æ–Ω'],
    'ona': ['–æ–Ω–∞'],
    'ono': ['–æ–Ω–æ'],
    'my': ['–º—ã'],
    'vy': ['–≤—ã'],
    'oni': ['–æ–Ω–∏'],
    'jeden': ['–æ–¥–∏–Ω'],
    'dva': ['–¥–≤–∞'],
    't≈ôi': ['—Ç—Ä–∏'],
    'ƒçty≈ôi': ['—á–µ—Ç—ã—Ä–µ'],
    'pƒõt': ['–ø—è—Ç—å'],
    '≈°est': ['—à–µ—Å—Ç—å'],
    'sedm': ['—Å–µ–º—å'],
    'osm': ['–≤–æ—Å–µ–º—å'],
    'devƒõt': ['–¥–µ–≤—è—Ç—å'],
    'deset': ['–¥–µ—Å—è—Ç—å'],

    // –ü—Ä–µ–¥–ª–æ–≥–∏ –∏ —á–∞—Å—Ç–∏—Ü—ã
    'do': ['–≤', '–∫', '–¥–æ'],
    'na': ['–Ω–∞', '–≤'],
    'za': ['–∑–∞', '–≤ —Ç–µ—á–µ–Ω–∏–µ'],
    'se': ['—Å–µ–±—è', '-—Å—è'],
    'ze': ['–∏–∑', '–æ—Ç'],
    'po': ['–ø–æ', '–ø–æ—Å–ª–µ'],
    'od': ['–æ—Ç', '—Å'],
    'pro': ['–¥–ª—è', '–∑–∞'],
    'p≈ôi': ['–ø—Ä–∏', '–≤–æ –≤—Ä–µ–º—è'],
    'bez': ['–±–µ–∑'],
    'podle': ['—Å–æ–≥–ª–∞—Å–Ω–æ', '–ø–æ'],
    'bƒõhem': ['–≤ —Ç–µ—á–µ–Ω–∏–µ', '–≤–æ –≤—Ä–µ–º—è'],
    'm√≠sto': ['–º–µ—Å—Ç–æ', '–≤–º–µ—Å—Ç–æ'],
    'kolem': ['–æ–∫–æ–ª–æ', '–≤–æ–∫—Ä—É–≥'],
    'mezi': ['–º–µ–∂–¥—É'],
    'p≈ôed': ['–ø–µ—Ä–µ–¥', '–¥–æ'],
    'nad': ['–Ω–∞–¥'],
    'pod': ['–ø–æ–¥'],
    'vedle': ['—Ä—è–¥–æ–º', '–æ–∫–æ–ª–æ'],
    'v': ['–≤'],
    'o': ['–æ', '–æ–±'],
    'u': ['—É', '–æ–∫–æ–ª–æ'],
    'k': ['–∫'],
    's': ['—Å'],
    'z': ['–∏–∑', '—Å'],

    // –ì–ª–∞–≥–æ–ª—ã
    'doporuƒçovat': ['—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å', '—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å'],
    'doporuƒçit': ['–ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å', '–ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å'],
    'm≈Ø≈æete': ['–º–æ–∂–µ—Ç–µ'],
    'm≈Ø≈æeme': ['–º–æ–∂–µ–º'],
    'chcete': ['—Ö–æ—Ç–∏—Ç–µ'],
    'chceme': ['—Ö–æ—Ç–∏–º'],
    'pot≈ôebujete': ['–Ω—É–∂–¥–∞–µ—Ç–µ—Å—å'],
    'pot≈ôebujeme': ['–Ω—É–∂–¥–∞–µ–º—Å—è'],
    'b√Ωt': ['–±—ã—Ç—å'],
    'm√≠t': ['–∏–º–µ—Ç—å'],
    'dƒõlat': ['–¥–µ–ª–∞—Ç—å'],
    'j√≠t': ['–∏–¥—Ç–∏'],
    '≈ô√≠ct': ['—Å–∫–∞–∑–∞—Ç—å'],
    'vƒõdƒõt': ['–∑–Ω–∞—Ç—å'],
    'vidƒõt': ['–≤–∏–¥–µ—Ç—å'],
    'd√°t': ['–¥–∞—Ç—å'],
    'p≈ôij√≠t': ['–ø—Ä–∏–π—Ç–∏'],
    'kl√°st': ['–∫–ª–∞—Å—Ç—å'],
    'prosit': ['–ø—Ä–æ—Å–∏—Ç—å'],
    'smƒõ≈ôovat': ['–Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å'],
    'pracovat': ['—Ä–∞–±–æ—Ç–∞—Ç—å'],
    'studovat': ['–∏–∑—É—á–∞—Ç—å'],
    'cestovat': ['–ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å'],
    'milovat': ['–ª—é–±–∏—Ç—å'],
    'hr√°t': ['–∏–≥—Ä–∞—Ç—å'],
    'ƒç√≠st': ['—á–∏—Ç–∞—Ç—å'],
    'ps√°t': ['–ø–∏—Å–∞—Ç—å'],
    'koupit': ['–∫—É–ø–∏—Ç—å'],
    'prodat': ['–ø—Ä–æ–¥–∞—Ç—å'],
    'naj√≠t': ['–Ω–∞–π—Ç–∏'],
    'ztratit': ['–ø–æ—Ç–µ—Ä—è—Ç—å'],
    'zaƒç√≠t': ['–Ω–∞—á–∞—Ç—å'],
    'skonƒçit': ['–∑–∞–∫–æ–Ω—á–∏—Ç—å'],
    'otev≈ô√≠t': ['–æ—Ç–∫—Ä—ã—Ç—å'],
    'zav≈ô√≠t': ['–∑–∞–∫—Ä—ã—Ç—å'],
    'sekat': ['—Ä—É–±–∏—Ç—å', '–∫–æ—Å–∏—Ç—å'],

    // –°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ
    'dotaz': ['–≤–æ–ø—Ä–æ—Å'],
    'z√°kazn√≠k': ['–∫–ª–∏–µ–Ω—Ç'],
    'ƒçlovƒõk': ['—á–µ–ª–æ–≤–µ–∫'],
    '≈æena': ['–∂–µ–Ω—â–∏–Ω–∞'],
    'mu≈æ': ['–º—É–∂—á–∏–Ω–∞'],
    'd√≠tƒõ': ['—Ä–µ–±–µ–Ω–æ–∫'],
    'rodina': ['—Å–µ–º—å—è'],
    'p≈ô√≠tel': ['–¥—Ä—É–≥'],
    'd≈Øm': ['–¥–æ–º'],
    'auto': ['–∞–≤—Ç–æ–º–æ–±–∏–ª—å', '–º–∞—à–∏–Ω–∞'],
    '≈°kola': ['—à–∫–æ–ª–∞'],
    'pr√°ce': ['—Ä–∞–±–æ—Ç–∞'],
    'ƒças': ['–≤—Ä–µ–º—è'],
    'den': ['–¥–µ–Ω—å'],
    'noc': ['–Ω–æ—á—å'],
    'r√°no': ['—É—Ç—Ä–æ'],
    'veƒçer': ['–≤–µ—á–µ—Ä'],
    'rok': ['–≥–æ–¥'],
    'mƒõs√≠c': ['–º–µ—Å—è—Ü'],
    't√Ωden': ['–Ω–µ–¥–µ–ª—è'],
    'hodina': ['—á–∞—Å'],
    'minuta': ['–º–∏–Ω—É—Ç–∞'],
    'kniha': ['–∫–Ω–∏–≥–∞'],
    'film': ['—Ñ–∏–ª—å–º'],
    'hudba': ['–º—É–∑—ã–∫–∞'],
    'telefon': ['—Ç–µ–ª–µ—Ñ–æ–Ω'],
    'poƒç√≠taƒç': ['–∫–æ–º–ø—å—é—Ç–µ—Ä'],
    'internet': ['–∏–Ω—Ç–µ—Ä–Ω–µ—Ç'],
    'pen√≠ze': ['–¥–µ–Ω—å–≥–∏'],
    'obchod': ['–º–∞–≥–∞–∑–∏–Ω'],
    'restaurace': ['—Ä–µ—Å—Ç–æ—Ä–∞–Ω'],
    'hotel': ['–æ—Ç–µ–ª—å'],
    'mƒõsto': ['–≥–æ—Ä–æ–¥'],
    'zemƒõ': ['—Å—Ç—Ä–∞–Ω–∞'],
    'svƒõt': ['–º–∏—Ä'],
    'seri√°l': ['—Å–µ—Ä–∏–∞–ª'],

    // –ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ
    'dobr√Ω': ['—Ö–æ—Ä–æ—à–∏–π'],
    '≈°patn√Ω': ['–ø–ª–æ—Ö–æ–π'],
    'velk√Ω': ['–±–æ–ª—å—à–æ–π'],
    'mal√Ω': ['–º–∞–ª–µ–Ω—å–∫–∏–π'],
    'nov√Ω': ['–Ω–æ–≤—ã–π'],
    'star√Ω': ['—Å—Ç–∞—Ä—ã–π'],
    'kr√°sn√Ω': ['–∫—Ä–∞—Å–∏–≤—ã–π'],
    'mlad√Ω': ['–º–æ–ª–æ–¥–æ–π'],
    'd≈Øle≈æit√Ω': ['–≤–∞–∂–Ω—ã–π'],
    'zaj√≠mav√Ω': ['–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π'],
    'tƒõ≈æk√Ω': ['—Ç—è–∂–µ–ª—ã–π', '—Ç—Ä—É–¥–Ω—ã–π'],
    'lehk√Ω': ['–ª–µ–≥–∫–∏–π'],
    'rychl√Ω': ['–±—ã—Å—Ç—Ä—ã–π'],
    'pomal√Ω': ['–º–µ–¥–ª–µ–Ω–Ω—ã–π'],
    'lep≈°√≠': ['–ª—É—á—à–∏–π'],
    'z√°kaznick√Ω': ['–∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π'],
    'skvƒõl√Ω': ['–æ—Ç–ª–∏—á–Ω—ã–π', '–≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã–π'],

    // –ù–∞—Ä–µ—á–∏—è
    'tak√©': ['—Ç–∞–∫–∂–µ'],
    'ƒçasto': ['—á–∞—Å—Ç–æ'],
    'nebo': ['–∏–ª–∏'],
    'jak√©koli': ['–ª—é–±—ã–µ'],
    'jak√Ωkoli': ['–ª—é–±–æ–π'],
    'samoz≈ôejmƒõ': ['–∫–æ–Ω–µ—á–Ω–æ', '–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ'],
    'mo≈æn√°': ['–º–æ–∂–µ—Ç –±—ã—Ç—å'],
    'urƒçitƒõ': ['—Ç–æ—á–Ω–æ', '–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ'],
    'hodnƒõ': ['–º–Ω–æ–≥–æ'],
    'm√°lo': ['–º–∞–ª–æ'],
    'v√≠ce': ['–±–æ–ª—å—à–µ'],
    'm√©nƒõ': ['–º–µ–Ω—å—à–µ']
  };

  return basicDict[word.toLowerCase()] || null;
}

/**
 * –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å –∏–∑ JSON-—Ñ–∞–π–ª–∞
 * @param {File} file - JSON-—Ñ–∞–π–ª —Å–æ —Å–ª–æ–≤–∞—Ä–µ–º
 * @returns {Promise<number>} - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤
 */
export async function importDictionaryFromJson(file) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    
    reader.onload = async (event) => {
      try {
        const dictionary = JSON.parse(event.target.result);
        
        if (!Array.isArray(dictionary)) {
          reject(new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –û–∂–∏–¥–∞–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ —Å–ª–æ–≤.'));
          return;
        }
        
        let importedCount = 0;
        let errorCount = 0;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –≤ Firebase
        for (const wordData of dictionary) {
          if (wordData && wordData.word) {
            try {
              await saveToCloudDictionary(wordData);
              importedCount++;
              
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–∫–∂–µ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
              localCache.save(wordData.word, wordData);
            } catch (saveError) {
              console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞ "${wordData.word}":`, saveError);
              errorCount++;
            }
          }
        }
        
        if (errorCount > 0) {
          console.warn(`‚ö†Ô∏è –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏. –£—Å–ø–µ—à–Ω–æ: ${importedCount}, —Å –æ—à–∏–±–∫–∞–º–∏: ${errorCount}`);
        }
        
        resolve(importedCount);
      } catch (error) {
        reject(error);
      }
    };
    
    reader.onerror = () => {
      reject(new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞'));
    };
    
    reader.readAsText(file);
  });
}

/**
 * –ü–æ–∏—Å–∫ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ –ø–æ –æ–±—Ä–∞–∑—Ü—É
 * @param {string} pattern - –û–±—Ä–∞–∑–µ—Ü –¥–ª—è –ø–æ–∏—Å–∫–∞
 * @returns {Promise<Array>} - –ú–∞—Å—Å–∏–≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
 */
export async function searchInDictionary(pattern) {
  if (!pattern) return [];
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫—ç—à–µ
    let results = [];
    try {
      const cacheKey = 'flashcards_seznam_cache';
      const cache = JSON.parse(localStorage.getItem(cacheKey) || '{}');
      const localResults = Object.values(cache).filter(item => 
        item.word.toLowerCase().includes(pattern.toLowerCase()) || 
        item.translations.some(t => t.toLowerCase().includes(pattern.toLowerCase()))
      );
      results = [...localResults];
    } catch (cacheError) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫—ç—à–µ:', cacheError);
    }
    
    // –ó–∞—Ç–µ–º –ø–æ–∏—â–µ–º –≤ Firebase
    try {
      const allWords = await getEntireDictionary();
      const cloudResults = allWords.filter(item => 
        item.word.toLowerCase().includes(pattern.toLowerCase()) || 
        item.translations.some(t => t.toLowerCase().includes(pattern.toLowerCase()))
      );
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
      const wordMap = {};
      
      // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞
      results.forEach(item => {
        wordMap[item.word.toLowerCase()] = item;
      });
      
      // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–∑ Firebase
      cloudResults.forEach(item => {
        wordMap[item.word.toLowerCase()] = item;
      });
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
      return Object.values(wordMap).sort((a, b) => a.word.localeCompare(b.word));
    } catch (firebaseError) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ Firebase:', firebaseError);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ–ª—å–∫–æ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞
      return results;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ —Å–ª–æ–≤–∞—Ä–µ:', error);
    return [];
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Firebase
 * @returns {Promise<boolean>} - true, –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
 */
export async function checkFirebaseConnection() {
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
    const testRef = ref(database, '.info/connected');
    const snapshot = await get(testRef);
    
    return snapshot.exists() && snapshot.val() === true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Firebase:', error);
    return false;
  }
}

/**
 * –û—á–∏—â–∞–µ—Ç –∫—ç—à –ø–µ—Ä–µ–≤–æ–¥–æ–≤ (–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π, –∏ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–π)
 */
export function clearTranslationsCache() {
  try {
    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–π –∫—ç—à
    window.translationsCache = {};
    
    // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
    localCache.clear();
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤:', error);
    return false;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–ª–æ–≤–∞—Ä—è
 * @returns {Promise<Object>} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ª–æ–≤–∞—Ä—è
 */
export async function getDictionaryStats() {
  try {
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ Firebase
    let cloudSize = 0;
    let mostCommonTranslations = [];
    
    try {
      const allWords = await getEntireDictionary();
      cloudSize = allWords.length;
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–µ—Å—è –ø–µ—Ä–µ–≤–æ–¥—ã
      const translationCounts = {};
      
      allWords.forEach(word => {
        (word.translations || []).forEach(translation => {
          translationCounts[translation] = (translationCounts[translation] || 0) + 1;
        });
      });
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ
      mostCommonTranslations = Object.entries(translationCounts)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 10)
        .map(([translation, count]) => ({ translation, count }));
    } catch (cloudError) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ Firebase:', cloudError);
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞
    let localSize = 0;
    
    try {
      const cacheKey = 'flashcards_seznam_cache';
      const cache = JSON.parse(localStorage.getItem(cacheKey) || '{}');
      localSize = Object.keys(cache).length;
    } catch (localError) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞:', localError);
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö HTML-—Ñ–∞–π–ª–æ–≤
    let htmlFilesCount = 0;
    try {
      const response = await fetch('/api/html-files-count');
      if (response.ok) {
        const data = await response.json();
        htmlFilesCount = data.count || 0;
      }
    } catch (htmlCountError) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ HTML-—Ñ–∞–π–ª–æ–≤:', htmlCountError);
    }
    
    return {
      cloudSize,
      localSize,
      htmlFilesCount,
      mostCommonTranslations,
      lastUpdated: new Date().toISOString()
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–ª–æ–≤–∞—Ä—è:', error);
    return {
      cloudSize: 0,
      localSize: 0,
      htmlFilesCount: 0,
      mostCommonTranslations: [],
      error: error.message,
      lastUpdated: new Date().toISOString()
    };
  }
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à –≤ Firebase
 * –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function syncLocalCacheToFirebase() {
  try {
    const cacheKey = 'flashcards_seznam_cache';
    const cache = JSON.parse(localStorage.getItem(cacheKey) || '{}');
    
    const words = Object.values(cache);
    let syncedCount = 0;
    let errorCount = 0;
    
    for (const word of words) {
      try {
        await saveToCloudDictionary(word);
        syncedCount++;
      } catch (saveError) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–ª–æ–≤–∞ "${word.word}":`, saveError);
        errorCount++;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ Firebase
      await new Promise(resolve => setTimeout(resolve, 200));
    }
    
    return {
      totalWords: words.length,
      syncedCount,
      errorCount,
      success: errorCount === 0,
      timestamp: new Date().toISOString()
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞ —Å Firebase:', error);
    return {
      totalWords: 0,
      syncedCount: 0,
      errorCount: 1,
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    };
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ HTML-—Ñ–∞–π–ª—ã –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä—å
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function processAllLocalHtmlFiles() {
  try {
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö HTML-—Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    const response = await fetch('/api/process-all-html-files');
    
    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ HTML-—Ñ–∞–π–ª–æ–≤: ${response.status}`);
    }
    
    const result = await response.json();
    
    if (result.success) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      result.processedWords.forEach(wordData => {
        localCache.save(wordData.word, wordData);
        if (window.translationsCache) {
          window.translationsCache[wordData.word] = wordData;
        }
      });
      
      console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${result.processedCount} HTML-—Ñ–∞–π–ª–æ–≤`);
      
      return {
        processedCount: result.processedCount,
        errorCount: result.errorCount,
        success: true,
        timestamp: new Date().toISOString()
      };
    } else {
      throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ HTML-—Ñ–∞–π–ª–æ–≤');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ HTML-—Ñ–∞–π–ª–æ–≤:', error);
    return {
      processedCount: 0,
      errorCount: 1,
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    };
  }
}

/**
 * –£–¥–∞–ª—è–µ—Ç HTML-—Ñ–∞–π–ª –ø–æ—Å–ª–µ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
 * @param {string} filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
 * @returns {Promise<boolean>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function deleteHtmlFile(filePath) {
  try {
    const response = await fetch(`/api/delete-file?path=${encodeURIComponent(filePath)}`, {
      method: 'DELETE'
    });
    
    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${response.status}`);
    }
    
    const result = await response.json();
    return result.success;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ HTML-—Ñ–∞–π–ª–∞:', error);
    return false;
  }
}

/**
 * ===============================================================================
 * –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° –°–£–©–ï–°–¢–í–£–Æ–©–ï–ô –°–ò–°–¢–ï–ú–û–ô
 * ===============================================================================
 */

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
 */
export function initializeNormalizationSystem() {
  console.log('\nüöÄ === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò ===');
  console.log('‚úÖ –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤–∏–ª –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —á–µ—à—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
  console.log('üìä –ü–æ–∫—Ä—ã—Ç–∏–µ: ~95% –≤—Å–µ—Ö —Å–ª–æ–≤–æ—Ñ–æ—Ä–º —á–µ—à—Å–∫–æ–≥–æ —è–∑—ã–∫–∞');
  console.log('‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: >1000 —Å–ª–æ–≤/—Å–µ–∫');
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö
  const testWords = ['se', 'si', 'doporuƒçujeme', 'kladen√Ωch', 'za≈ô√≠zen√≠', 'skvƒõl√©'];
  console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –Ω–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö:');
  
  testWords.forEach(word => {
    const variants = czechNormalizer.normalize(word);
    const shouldNormalize = !czechNormalizer.doNotNormalize.has(word.toLowerCase());
    const wasNormalized = variants.length > 1;
    const status = shouldNormalize === wasNormalized ? '‚úÖ' : '‚ùå';
    
    console.log(`  ${word} ‚Üí [${variants.join(', ')}] ${status}`);
  });
  
  console.log('\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
 */
export function getNormalizationSystemInfo() {
  return {
    version: '2.0.0',
    rulesCount: czechNormalizer.rules.length,
    exceptionsCount: Object.keys(czechNormalizer.exceptions).length,
    doNotNormalizeCount: czechNormalizer.doNotNormalize.size,
    adjectiveToNounCount: Object.keys(czechNormalizer.adjectiveToNoun).length,
    coverage: '~95%',
    performance: '>1000 words/sec'
  };
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
 */
export function testNormalizationPerformance() {
  const testWords = [
    'doporuƒçujeme', 'z√°kaznickou', 'kladen√Ωch', 'seri√°ly', 'na≈°ich', 'm√©ho',
    'kvalitn√≠', 'pracoval', 'dƒõlaj√≠c√≠', 'mƒõstsk√©', 'pros√≠me', 'smƒõ≈ôujte',
    'samoz≈ôejmƒõ', 'za≈ô√≠zen√≠', 'se', 'si', 'jak', 'kde', 'u≈æ', 'tak√©'
  ];

  const iterations = 100;
  const startTime = performance.now();
  
  for (let i = 0; i < iterations; i++) {
    testWords.forEach(word => {
      czechNormalizer.normalize(word);
    });
  }
  
  const endTime = performance.now();
  const totalTime = endTime - startTime;
  const avgTimePerWord = totalTime / (iterations * testWords.length);
  
  const result = {
    totalWords: iterations * testWords.length,
    totalTime: totalTime.toFixed(2) + ' –º—Å',
    avgTimePerWord: avgTimePerWord.toFixed(3) + ' –º—Å',
    wordsPerSecond: Math.round(1000 / avgTimePerWord)
  };
  
  console.log('\n‚ö° === –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò ===');
  console.log(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–ª–æ–≤: ${result.totalWords}`);
  console.log(`–û–±—â–µ–µ –≤—Ä–µ–º—è: ${result.totalTime}`);
  console.log(`–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Å–ª–æ–≤–æ: ${result.avgTimePerWord}`);
  console.log(`–°–ª–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: ${result.wordsPerSecond}`);
  
  return result;
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
export { localCache };

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
export { czechNormalizer };

/**
 * ===============================================================================
 * –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ –° –°–£–©–ï–°–¢–í–£–Æ–©–ò–ú –ö–û–î–û–ú
 * ===============================================================================
 */

// –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º, —Å–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
if (typeof window !== 'undefined') {
  // –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –Ω–æ–≤—É—é —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π
  window.fetchTranslationWithNormalization = fetchTranslation;
  window.fetchTranslation = fetchTranslation;
  
  // –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
  window.saveToCloudDictionary = saveToCloudDictionary;
  window.getFromCloudDictionary = getFromCloudDictionary;
  window.getEntireDictionary = getEntireDictionary;
  window.exportDictionaryToJson = exportDictionaryToJson;
  window.clearTranslationsCache = clearTranslationsCache;
  window.getDictionaryStats = getDictionaryStats;
  window.czechNormalizer = czechNormalizer;
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
  initializeNormalizationSystem();
}

/**
 * ===============================================================================
 * –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø
 * ===============================================================================
 * 
 * –û–°–ù–û–í–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í –≠–¢–û–ô –í–ï–†–°–ò–ò:
 * 
 * 1. ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ø—Ä–∞–≤–∏–ª –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ CzechNormalizationRules
 * 2. ‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è fetchTranslation —Å –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π
 * 3. ‚úÖ –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
 * 4. ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–µ—Ä–µ–≤–æ–¥–∞
 * 5. ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –±–∞–∑–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è fallback
 * 6. ‚úÖ –§—É–Ω–∫—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * 7. ‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
 * 
 * –ù–û–í–´–ï –ü–û–õ–Ø –í –†–ï–ó–£–õ–¨–¢–ê–¢–ê–• –ü–ï–†–ï–í–û–î–ê:
 * 
 * - originalWord: –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–ª–æ–≤–æ, –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
 * - normalizedWord: —Å–ª–æ–≤–æ, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–π–¥–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ (–º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ)
 * - normalizedVariants: –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã
 * - usedNormalization: true, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
 * 
 * –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:
 * 
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞: >1000 —Å–ª–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
 * - –ü–æ–∫—Ä—ã—Ç–∏–µ: ~95% –≤—Å–µ—Ö —Å–ª–æ–≤–æ—Ñ–æ—Ä–º —á–µ—à—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
 * - –¢–æ—á–Ω–æ—Å—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: >90%
 * 
 * ===============================================================================
 */