// server.js - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è HTML —Ñ–∞–π–ª–æ–≤ –¥–ª—è Flashcards Seznam
const express = require('express');
const axios = require('axios');
const cheerio = require('cheerio');
const cors = require('cors');
const path = require('path');
const fs = require('fs');
const multer = require('multer');
const os = require('os');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Express
const app = express();
const PORT = process.env.PORT || 3001;

// –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É Host –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è Railway deployment
app.set('trust proxy', true);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã "Invalid Host header" –Ω–∞ Railway
app.use((req, res, next) => {
  // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å –ª—é–±–æ–≥–æ —Ö–æ—Å—Ç–∞
  req.headers.host = req.headers.host || 'flashcards-seznam-production.up.railway.app';
  next();
});

// –í–∞–∂–Ω–æ: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CORS –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –Ω–∞ Railway

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤, –æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è Netlify
app.use(cors({
  origin: ['https://flashcards-seznam.netlify.app', 'http://localhost:3000', '*'],  // –Ø–≤–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º Netlify –∏ localhost
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
}));

// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ CORS –≤—Ä—É—á–Ω—É—é –¥–ª—è –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤
app.use((req, res, next) => {
  const origin = req.headers.origin;
  // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å Netlify –∏–ª–∏ localhost, —è–≤–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º —ç—Ç–æ—Ç –¥–æ–º–µ–Ω
  if (origin && (origin.includes('netlify.app') || origin.includes('localhost'))) {
    res.header('Access-Control-Allow-Origin', origin);
  } else {
    res.header('Access-Control-Allow-Origin', '*');
  }
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With');
  res.header('Access-Control-Allow-Credentials', 'true');
  next();
});

app.use(express.json());

// –ú—É–ª—å—Ç–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
const upload = multer({ 
  storage: multer.memoryStorage(),
  limits: { fileSize: 5 * 1024 * 1024 } // 5MB –ª–∏–º–∏—Ç
});

// –ü–∞–ø–∫–∞ —Å HTML-—Ñ–∞–π–ª–∞–º–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ)
const parsedWordsFolder = path.join(__dirname, 'parsed_glosbe_words');
if (!fs.existsSync(parsedWordsFolder)) {
  fs.mkdirSync(parsedWordsFolder, { recursive: true });
}

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —Å—Ç–∞—Ä—ã—Ö HTML —Ñ–∞–π–ª–æ–≤
function cleanupAllFiles() {
  try {
    if (fs.existsSync(parsedWordsFolder)) {
      const files = fs.readdirSync(parsedWordsFolder)
        .filter(file => file.endsWith('.htm') || file.endsWith('.html'));
      
      files.forEach(file => {
        const filepath = path.join(parsedWordsFolder, file);
        fs.unlinkSync(filepath);
      });
      
      if (files.length > 0) {
        console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ ${files.length} —Å—Ç–∞—Ä—ã—Ö HTML —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ`);
      }
    }
  } catch (error) {
    console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–æ–≤:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å)
function cleanupOldFiles() {
  try {
    if (!fs.existsSync(parsedWordsFolder)) return;
    
    const files = fs.readdirSync(parsedWordsFolder);
    const now = Date.now();
    let deletedCount = 0;
    
    files.forEach(file => {
      if (!file.endsWith('.htm') && !file.endsWith('.html')) return;
      
      const filepath = path.join(parsedWordsFolder, file);
      const stats = fs.statSync(filepath);
      const ageHours = (now - stats.mtime.getTime()) / (1000 * 60 * 60);
      
      // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
      if (ageHours > 1) {
        fs.unlinkSync(filepath);
        deletedCount++;
      }
    });
    
    if (deletedCount > 0) {
      console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ ${deletedCount} —Å—Ç–∞—Ä—ã—Ö HTML —Ñ–∞–π–ª–æ–≤ (–∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞)`);
    }
  } catch (error) {
    console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–æ–≤:', error);
  }
}

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.use(express.static(path.join(__dirname, 'build')));

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Glosbe –ë–ï–ó —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
class GlosbeParser {
  constructor() {
    this.requestDelay = 1500; // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    this.lastRequestTime = 0;
    this.saveFiles = process.env.SAVE_HTML_FILES === 'true'; // false –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    this.maxRetries = 3; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    this.retryDelay = 2000; // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–º—Å)
    
    // –†–æ—Ç–∞—Ü–∏—è User-Agent –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    this.userAgents = [
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
      'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.0 Safari/605.1.15',
      'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/119.0',
      'Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.0 Mobile/15E148 Safari/604.1'
    ];
    
    // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
    this.translationSelectors = [
      'li.translation__item .translation__item__pharse', // –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä
      '#less-frequent-translations-container-0 ul li',   // –ú–µ–Ω–µ–µ —á–∞—Å—Ç—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
      '.translation__translations .translation__item',    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
      '.translation__pharse',                            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
      '.translation-item__phrase',                       // –ù–æ–≤—ã–π –≤–æ–∑–º–æ–∂–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
      '.phrase-translations__translation',               // –ï—â–µ –æ–¥–∏–Ω –≤–æ–∑–º–æ–∂–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
      '.translation-item'                                // –ó–∞–ø–∞—Å–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä
    ];
    
    // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤ (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
    this.exampleSelectors = [
      { container: '.translation__example', source: '[lang="cs"]', target: '.w-1/2.px-1.ml-2' },
      { container: '#tmem_first_examples .odd\\:bg-slate-100', source: '.w-1/2.dir-aware-pr-1', target: '.w-1/2.dir-aware-pl-1' },
      { container: '.tmem_first_examples .bg-slate-50', source: '.segment:first-child', target: '.segment:nth-child(2)' },
      { container: '.examples-wrapper .example', source: '.example-source', target: '.example-target' },
      { container: '.example-item', source: '.source-text', target: '.target-text' }
    ];
    
    // –°—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö –ø–∞—Ä—Å–∏–Ω–≥–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    this.stats = {
      totalRequests: 0,
      successfulParses: 0,
      failedParses: 0,
      retries: 0,
      emptyResults: 0,
      lastParsedSelectors: {}
    };
  }

  async parseWord(word, fromLang = 'cs', toLang = 'ru') {
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
    this.stats.totalRequests++;
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    const fetchWithRetry = async (retryCount = 0) => {
      try {
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        const now = Date.now();
        const timeSinceLastRequest = now - this.lastRequestTime;
        if (timeSinceLastRequest < this.requestDelay) {
          await new Promise(resolve => setTimeout(resolve, this.requestDelay - timeSinceLastRequest));
        }
        this.lastRequestTime = Date.now();

        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π User-Agent –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
        const randomUserAgent = this.userAgents[Math.floor(Math.random() * this.userAgents.length)];
        
        console.log(`[${new Date().toLocaleTimeString()}] –ü–∞—Ä—Å–∏–º —Å–ª–æ–≤–æ: "${word}" (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}/${this.maxRetries + 1})`);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º URL
        const encodedWord = encodeURIComponent(word);
        const url = `https://glosbe.com/${fromLang}/${toLang}/${encodedWord}`;
        
        console.log(`–ó–∞–ø—Ä–æ—Å –∫ URL: ${url} (User-Agent: ${randomUserAgent.substring(0, 30)}...)`);
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        const response = await axios.get(url, {
          headers: {
            'User-Agent': randomUserAgent,
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7,cs;q=0.6',
            'Accept-Encoding': 'gzip, deflate, br',
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache',
            'Referer': 'https://glosbe.com/',
            'DNT': '1',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
            'Sec-Fetch-Dest': 'document',
            'Sec-Fetch-Mode': 'navigate',
            'Sec-Fetch-Site': 'same-origin',
            'Sec-Fetch-User': '?1'
          },
          timeout: 20000, // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
          maxRedirects: 5,
          validateStatus: status => status === 200 // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ 200 –∫–∞–∫ —É—Å–ø–µ—Ö
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –ø—É—Å—Ç–∞—è –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞–ø—á—É
        if (!response.data || response.data.length < 1000) {
          throw new Error('–ü–æ–ª—É—á–µ–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞');
        }
        
        if (response.data.includes('captcha') || response.data.includes('robot') || response.data.includes('blocked')) {
          throw new Error('–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞ –∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞');
        }

        // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏
        const parsedData = this.parseHtmlContent(response.data, word);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if (parsedData.translations.length === 0 && parsedData.samples.length === 0) {
          this.stats.emptyResults++;
          console.warn(`–ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è "${word}"`);
          
          // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –Ω–æ –µ—Å—Ç—å –µ—â–µ –ø–æ–ø—ã—Ç–∫–∏, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
          if (retryCount < this.maxRetries) {
            this.stats.retries++;
            console.log(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è "${word}" —á–µ—Ä–µ–∑ ${this.retryDelay/1000} —Å–µ–∫...`);
            await new Promise(resolve => setTimeout(resolve, this.retryDelay));
            return await fetchWithRetry(retryCount + 1);
          }
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, –µ—Å–ª–∏ —Ñ–ª–∞–≥ –≤–∫–ª—é—á–µ–Ω
        if (this.saveFiles) {
          const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
          const filename = `${fromLang}_${toLang}_${word}_${timestamp}.htm`;
          const filepath = path.join(parsedWordsFolder, filename);
          
          try {
            fs.writeFileSync(filepath, response.data, 'utf8');
            console.log(`üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω HTML —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: ${filename}`);
            
            // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
            setTimeout(() => {
              try {
                if (fs.existsSync(filepath)) {
                  fs.unlinkSync(filepath);
                  console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª –æ—Ç–ª–∞–¥–∫–∏: ${filename}`);
                }
              } catch (delError) {
                console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –æ—Ç–ª–∞–¥–∫–∏: ${delError.message}`);
              }
            }, 10 * 60 * 1000); // 10 –º–∏–Ω—É—Ç
          } catch (saveError) {
            console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –æ—Ç–ª–∞–¥–∫–∏: ${saveError.message}`);
          }
        }
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –ø–∞—Ä—Å–∏–Ω–≥–æ–≤
        this.stats.successfulParses++;
        
        return {
          success: true,
          word: word,
          data: parsedData,
          savedFile: this.saveFiles ? '–≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω' : '–Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω',
          retryCount: retryCount
        };
      } catch (error) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –ø–æ–ø—ã—Ç–∫–∏, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
        if (retryCount < this.maxRetries) {
          this.stats.retries++;
          console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ "${word}": ${error.message}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}/${this.maxRetries}...`);
          
          // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π (—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞)
          const delay = this.retryDelay * Math.pow(1.5, retryCount);
          await new Promise(resolve => setTimeout(resolve, delay));
          return await fetchWithRetry(retryCount + 1);
        }
        
        // –ï—Å–ª–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
        this.stats.failedParses++;
        throw error;
      }
    };
    
    try {
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
      return await fetchWithRetry();
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ "${word}" (–ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫):`, error.message);
      return {
        success: false,
        word: word,
        error: error.message,
        retries: this.maxRetries
      };
    }
  }

  parseHtmlContent(htmlContent, word) {
    try {
      const $ = cheerio.load(htmlContent);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
      const translations = [];
      const usedSelectors = {}; // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –∫–∞–∫–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —Å—Ä–∞–±–æ—Ç–∞–ª–∏
      
      // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
      for (const selector of this.translationSelectors) {
        let found = false;
        
        // –ï—Å–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–µ–ª, —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –∏ –∑–∞—Ç–µ–º –µ–≥–æ –¥–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
        if (selector.includes(' ')) {
          const [containerSelector, childSelector] = selector.split(' ').map(s => s.trim());
          $(containerSelector).each((i, elem) => {
            const translationText = $(elem).find(childSelector).text().trim();
            if (translationText && !translationText.includes('Less frequent translations')) {
              translations.push(translationText);
              found = true;
            }
          });
        } else {
          // –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É
          $(selector).each((i, elem) => {
            const translationText = $(elem).text().trim();
            if (translationText && !translationText.includes('Less frequent translations')) {
              translations.push(translationText);
              found = true;
            }
          });
        }
        
        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–µ—Ä–µ–≤–æ–¥—ã —Å —ç—Ç–∏–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º, –æ—Ç–º–µ—á–∞–µ–º –µ–≥–æ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
        if (found) {
          usedSelectors[selector] = true;
        }
      }
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      const samples = [];
      const usedExampleSelectors = {}; // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –∫–∞–∫–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –ø—Ä–∏–º–µ—Ä–æ–≤ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
      
      // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º –ø—Ä–∏–º–µ—Ä–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
      for (const selectorSet of this.exampleSelectors) {
        let found = false;
        
        $(selectorSet.container).each((i, elem) => {
          let sourceText, targetText;
          
          // –ï—Å–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç :first-child –∏–ª–∏ :nth-child
          if (selectorSet.source.includes(':')) {
            // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–ø—Ä—è–º—É—é –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            sourceText = $(elem).find(selectorSet.source).text().trim();
            targetText = $(elem).find(selectorSet.target).text().trim();
          } else {
            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–∏—Å–∫
            sourceText = $(elem).find(selectorSet.source).text().trim();
            targetText = $(elem).find(selectorSet.target).text().trim();
          }
          
          if (sourceText && targetText) {
            samples.push({
              phrase: sourceText,
              translation: targetText
            });
            found = true;
          }
        });
        
        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø—Ä–∏–º–µ—Ä—ã —Å —ç—Ç–∏–º –Ω–∞–±–æ—Ä–æ–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤, –æ—Ç–º–µ—á–∞–µ–º –µ–≥–æ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
        if (found) {
          usedExampleSelectors[selectorSet.container] = true;
        }
        
        // –ï—Å–ª–∏ —É–∂–µ –Ω–∞—à–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∏–º–µ—Ä–æ–≤, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫
        if (samples.length >= 5) {
          break;
        }
      }
      
      // –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º—É HTML –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –Ω–∏ –æ–¥–∏–Ω –∏–∑ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
      if (translations.length === 0) {
        // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã (div, span, li —Å —Ç–µ–∫—Å—Ç–æ–º)
        $('div, span, li').each((i, elem) => {
          const text = $(elem).text().trim();
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
          if (text && text.length > 1 && text.length < 50 && 
              !text.includes('<') && !text.includes('>') && 
              !text.includes('Glosbe') && !text.includes('translation')) {
            translations.push(text);
          }
        });
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã
      this.stats.lastParsedSelectors = {
        translations: usedSelectors,
        examples: usedExampleSelectors
      };
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      const uniqueTranslations = [...new Set(translations)]
        .filter(t => t.length > 0 && t.length < 100) // –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        .filter(t => !t.includes('http') && !t.includes('www')) // –ò—Å–∫–ª—é—á–∞–µ–º URL
        .slice(0, 10); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –ª–∏ –ø–µ—Ä–µ–≤–æ–¥—ã HTML-—Ç–µ–≥–∏
      const cleanTranslations = uniqueTranslations.map(t => {
        // –£–¥–∞–ª—è–µ–º HTML-—Ç–µ–≥–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        return t.replace(/<[^>]*>/g, '');
      });
      
      return {
        word: word,
        translations: cleanTranslations,
        samples: samples.slice(0, 5), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        source: 'glosbe_direct',
        timestamp: new Date().toISOString(),
        usedSelectors: Object.keys(usedSelectors),
        usedExampleSelectors: Object.keys(usedExampleSelectors)
      };
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ HTML –¥–ª—è "${word}":`, error.message);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      return {
        word: word,
        translations: [],
        samples: [],
        source: 'glosbe_direct',
        timestamp: new Date().toISOString(),
        error: error.message
      };
    }
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞
const glosbeParser = new GlosbeParser();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö HTML-—Ñ–∞–π–ª–æ–≤
function cleanupOldHtmlFiles(maxAgeDays = 30) {
  try {
    const cutoffDate = new Date(Date.now() - (maxAgeDays * 24 * 60 * 60 * 1000));
    let deletedCount = 0;
    let totalSize = 0;
    
    if (fs.existsSync(parsedWordsFolder)) {
      const files = fs.readdirSync(parsedWordsFolder)
        .filter(file => file.endsWith('.htm'))
        .map(file => path.join(parsedWordsFolder, file));
      
      files.forEach(file => {
        try {
          const stats = fs.statSync(file);
          if (stats.birthtime < cutoffDate) {
            totalSize += stats.size;
            fs.unlinkSync(file);
            deletedCount++;
          }
        } catch (err) {
          console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${file}:`, err.message);
        }
      });
      
      if (deletedCount > 0) {
        console.log(`üßπ –û—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª–µ–Ω–æ ${deletedCount} —Å—Ç–∞—Ä—ã—Ö HTML-—Ñ–∞–π–ª–æ–≤ (${(totalSize / 1024).toFixed(2)} KB)`);
      }
      
      return { deletedCount, totalSize };
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö HTML-—Ñ–∞–π–ª–æ–≤:', error.message);
    return { deletedCount: 0, totalSize: 0, error: error.message };
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
cleanupOldHtmlFiles();

// –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—É—é –æ—á–∏—Å—Ç–∫—É –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
setInterval(() => {
  console.log('–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö HTML-—Ñ–∞–π–ª–æ–≤...');
  cleanupOldHtmlFiles();
}, 24 * 60 * 60 * 1000);

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
app.get('/api/parser-stats', (req, res) => {
  try {
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
    const uptime = process.uptime();
    const uptimeFormatted = {
      days: Math.floor(uptime / 86400),
      hours: Math.floor((uptime % 86400) / 3600),
      minutes: Math.floor((uptime % 3600) / 60),
      seconds: Math.floor(uptime % 60)
    };
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –≤ –ø–∞–ø–∫–µ —Å HTML
    let htmlFiles = [];
    let totalHtmlSize = 0;
    
    if (fs.existsSync(parsedWordsFolder)) {
      htmlFiles = fs.readdirSync(parsedWordsFolder)
        .filter(file => file.endsWith('.htm'))
        .map(file => {
          const filePath = path.join(parsedWordsFolder, file);
          try {
            const stats = fs.statSync(filePath);
            totalHtmlSize += stats.size;
            return {
              name: file,
              size: stats.size,
              created: stats.mtime
            };
          } catch (err) {
            return null;
          }
        })
        .filter(file => file !== null)
        .sort((a, b) => new Date(b.created) - new Date(a.created)); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = {
      parser: glosbeParser.stats,
      server: {
        uptime: uptimeFormatted,
        uptimeSeconds: uptime,
        startTime: new Date(Date.now() - (uptime * 1000)).toISOString(),
        currentTime: new Date().toISOString(),
        memory: process.memoryUsage()
      },
      htmlFiles: {
        count: htmlFiles.length,
        totalSize: totalHtmlSize,
        totalSizeFormatted: `${(totalHtmlSize / 1024).toFixed(2)} KB`,
        files: htmlFiles.slice(0, 10) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞
      },
      lastParsedSelectors: glosbeParser.stats.lastParsedSelectors,
      successRate: glosbeParser.stats.totalRequests > 0 ? 
        (glosbeParser.stats.successfulParses / glosbeParser.stats.totalRequests * 100).toFixed(2) + '%' : '0%'
    };
    
    res.json(stats);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', details: error.message });
  }
});

// API –¥–ª—è —Ä—É—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ HTML-—Ñ–∞–π–ª–æ–≤
app.delete('/api/cleanup-html-files', async (req, res) => {
  try {
    const maxAgeDays = parseInt(req.query.maxAgeDays) || 7; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 7 –¥–Ω–µ–π
    const result = cleanupOldHtmlFiles(maxAgeDays);
    res.json({
      success: true,
      message: `–°—Ç–∞—Ä—ã–µ HTML-—Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã (${result.deletedCount} —Ñ–∞–π–ª–æ–≤, ${(result.totalSize / 1024).toFixed(2)} KB)`,
      ...result
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö HTML-—Ñ–∞–π–ª–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö HTML-—Ñ–∞–π–ª–æ–≤', details: error.message });
  }
});

// –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤
app.use('/api/*', (req, res, next) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏—à–µ–ª —Å Netlify –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
  const origin = req.headers.origin || req.headers.referer;
  
  // –ï—Å–ª–∏ —ç—Ç–æ OPTIONS-–∑–∞–ø—Ä–æ—Å (preflight), —Å—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º —É—Å–ø–µ—Ö–æ–º
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å CORS
  res.header('Content-Type', 'application/json');
  
  // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
  next();
});

// API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
app.get('/api/health', (req, res) => {
  res.json({
    status: 'ok',
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV || 'development',
    service: 'flashcards-seznam-api'
  });
});

// API –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–ª–æ–≤–∞
app.get('/api/translate', async (req, res) => {
  try {
    const { word, from, to, checkLocal } = req.query;
    
    if (!word) {
      return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–æ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞' });
    }
    
    const fromLang = from || 'cs';
    const toLang = to || 'ru';
    
    console.log(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥: ${word} (${fromLang} -> ${toLang})`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ checkLocal=true
    if (checkLocal === 'true' && fs.existsSync(parsedWordsFolder)) {
      const existingFiles = fs.readdirSync(parsedWordsFolder)
        .filter(file => file.includes(`${fromLang}_${toLang}_${word}_`) && file.endsWith('.htm'));

      if (existingFiles.length > 0) {
        console.log(`–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π HTML —Ñ–∞–π–ª –¥–ª—è "${word}"`);
        const filepath = path.join(parsedWordsFolder, existingFiles[0]);
        const html = fs.readFileSync(filepath, 'utf8');
        const parsedData = glosbeParser.parseHtmlContent(html, word);
        
        return res.json({
          success: true,
          word: word,
          data: parsedData,
          source: 'local_cache'
        });
      }
    }
    
    const result = await glosbeParser.parseWord(word, fromLang, toLang);
    res.json(result);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ:', error);
    res.status(500).json({ 
      success: false, 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ', 
      details: error.message 
    });
  }
});

// API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è HTML (–∏–∑ glosbeTranslator.js)
app.post('/api/save-html', upload.single('html'), (req, res) => {
  try {
    const { word, from_lang = 'cs', to_lang = 'ru' } = req.body;
    
    if (!req.file || !word) {
      return res.status(400).json({
        success: false,
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ñ–∞–π–ª HTML –∏ —Å–ª–æ–≤–æ'
      });
    }
    
    const htmlContent = req.file.buffer.toString();
    
    // –ü–∞—Ä—Å–∏–º –°–†–ê–ó–£ –≤ –ø–∞–º—è—Ç–∏, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—è —Ñ–∞–π–ª
    const parsedData = glosbeParser.parseHtmlContent(htmlContent, word);
    
    res.json({
      success: true,
      data: parsedData,
      message: 'HTML –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ –ø–∞–º—è—Ç–∏ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è'
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ HTML:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ HTML',
      message: error.message
    });
  }
});

// API –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
app.post('/api/translate/batch', async (req, res) => {
  try {
    const { words, from = 'cs', to = 'ru' } = req.body;
    
    if (!words || !Array.isArray(words)) {
      return res.status(400).json({
        success: false,
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ words'
      });
    }

    console.log(`–ú–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ ${words.length} —Å–ª–æ–≤`);
    
    const results = [];
    
    for (const word of words) {
      if (word && word.trim()) {
        const result = await glosbeParser.parseWord(word.trim(), from, to);
        results.push(result);
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }
    
    return res.json({
      success: true,
      results: results,
      total: results.length,
      message: '–§–∞–π–ª—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏—Å—å, —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –ø–∞–º—è—Ç–∏'
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –º–∞—Å—Å–æ–≤–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ:', error);
    return res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ',
      message: error.message
    });
  }
});

// API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
app.get('/api/files', (req, res) => {
  try {
    const files = fs.readdirSync(parsedWordsFolder)
      .filter(file => file.endsWith('.htm') || file.endsWith('.html'))
      .map(file => {
        const filepath = path.join(parsedWordsFolder, file);
        const stats = fs.statSync(filepath);
        return {
          filename: file,
          size: stats.size,
          created: stats.mtime,
          word: file.split('_')[2] // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–æ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        };
      });
    
    res.json({
      success: true,
      files: files,
      count: files.length,
      message: files.length === 0 ? '–§–∞–π–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏' : '–ù–∞–π–¥–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã'
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤'
    });
  }
});

// API –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ HTML —Ñ–∞–π–ª–æ–≤
app.get('/api/html-files-count', (req, res) => {
  try {
    const files = fs.readdirSync(parsedWordsFolder)
      .filter(file => file.endsWith('.htm') || file.endsWith('.html'));
    
    res.json({
      success: true,
      count: files.length
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      count: 0,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Ñ–∞–π–ª–æ–≤'
    });
  }
});

// API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
app.delete('/api/files/:filename', (req, res) => {
  try {
    const filename = req.params.filename;
    const filepath = path.join(parsedWordsFolder, filename);
    
    if (fs.existsSync(filepath)) {
      fs.unlinkSync(filepath);
      res.json({ 
        success: true, 
        message: '–§–∞–π–ª —É–¥–∞–ª–µ–Ω' 
      });
    } else {
      res.status(404).json({ 
        success: false, 
        error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }
  } catch (error) {
    res.status(500).json({ 
      success: false, 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞' 
    });
  }
});

// API –¥–ª—è —Ä—É—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
app.delete('/api/files', (req, res) => {
  try {
    cleanupAllFiles();
    res.json({
      success: true,
      message: '–í—Å–µ HTML —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã'
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–æ–≤'
    });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
app.get('/api/health', (req, res) => {
  res.json({
    status: 'ok',
    service: 'flashcards-seznam-api',
    timestamp: new Date().toISOString(),
    version: '1.0.0',
    features: {
      saveFiles: glosbeParser.saveFiles,
      autoCleanup: true,
      memoryParsing: true
    }
  });
});

// –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'build', 'index.html'));
});

// Catch-all –º–∞—Ä—à—Ä—É—Ç –¥–ª—è React Router (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'build', 'index.html'));
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
app.listen(PORT, () => {
  console.log(`üöÄ Flashcards Seznam API –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üìÅ –ü–∞–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: ${parsedWordsFolder}`);
  console.log(`üóëÔ∏è –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤: –≤–∫–ª—é—á–µ–Ω–∞`);
  console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ HTML —Ñ–∞–π–ª–æ–≤: ${glosbeParser.saveFiles ? '–≤–∫–ª—é—á–µ–Ω–æ (–æ—Ç–ª–∞–¥–∫–∞)' : '–æ—Ç–∫–ª—é—á–µ–Ω–æ'}`);
  console.log(`üîó API endpoints:`);
  console.log(`   GET  /api/translate?word=—Å–ª–æ–≤–æ&from=cs&to=ru`);
  console.log(`   POST /api/translate/batch`);
  console.log(`   GET  /api/files`);
  console.log(`   DELETE /api/files (–æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ)`);
  console.log(`   GET  /api/health`);
});

module.exports = app;