// server.js - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è HTML —Ñ–∞–π–ª–æ–≤ –¥–ª—è Flashcards Seznam
const express = require('express');
const axios = require('axios');
const cheerio = require('cheerio');
const cors = require('cors');
const path = require('path');
const fs = require('fs');
const multer = require('multer');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Express
const app = express();
const PORT = process.env.PORT || 3001;

// –í–∞–∂–Ω–æ: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CORS –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –Ω–∞ Railway

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤
app.use(cors({
  origin: '*',  // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å –ª—é–±–æ–≥–æ –¥–æ–º–µ–Ω–∞
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));

// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ CORS –≤—Ä—É—á–Ω—É—é –¥–ª—è –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  next();
});

app.use(express.json());

// –ú—É–ª—å—Ç–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
const upload = multer({ 
  storage: multer.memoryStorage(),
  limits: { fileSize: 5 * 1024 * 1024 } // 5MB –ª–∏–º–∏—Ç
});

// –ü–∞–ø–∫–∞ —Å HTML-—Ñ–∞–π–ª–∞–º–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ)
const parsedWordsFolder = path.join(__dirname, 'parsed_glosbe_words');
if (!fs.existsSync(parsedWordsFolder)) {
  fs.mkdirSync(parsedWordsFolder, { recursive: true });
}

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —Å—Ç–∞—Ä—ã—Ö HTML —Ñ–∞–π–ª–æ–≤
function cleanupAllFiles() {
  try {
    if (fs.existsSync(parsedWordsFolder)) {
      const files = fs.readdirSync(parsedWordsFolder)
        .filter(file => file.endsWith('.htm') || file.endsWith('.html'));
      
      files.forEach(file => {
        const filepath = path.join(parsedWordsFolder, file);
        fs.unlinkSync(filepath);
      });
      
      if (files.length > 0) {
        console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ ${files.length} —Å—Ç–∞—Ä—ã—Ö HTML —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ`);
      }
    }
  } catch (error) {
    console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–æ–≤:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å)
function cleanupOldFiles() {
  try {
    if (!fs.existsSync(parsedWordsFolder)) return;
    
    const files = fs.readdirSync(parsedWordsFolder);
    const now = Date.now();
    let deletedCount = 0;
    
    files.forEach(file => {
      if (!file.endsWith('.htm') && !file.endsWith('.html')) return;
      
      const filepath = path.join(parsedWordsFolder, file);
      const stats = fs.statSync(filepath);
      const ageHours = (now - stats.mtime.getTime()) / (1000 * 60 * 60);
      
      // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
      if (ageHours > 1) {
        fs.unlinkSync(filepath);
        deletedCount++;
      }
    });
    
    if (deletedCount > 0) {
      console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ ${deletedCount} —Å—Ç–∞—Ä—ã—Ö HTML —Ñ–∞–π–ª–æ–≤ (–∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞)`);
    }
  } catch (error) {
    console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–æ–≤:', error);
  }
}

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.use(express.static(path.join(__dirname, 'build')));

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Glosbe –ë–ï–ó —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
class GlosbeParser {
  constructor() {
    this.requestDelay = 1000; // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    this.lastRequestTime = 0;
    this.saveFiles = process.env.SAVE_HTML_FILES === 'true'; // false –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  }

  async parseWord(word, fromLang = 'cs', toLang = 'ru') {
    try {
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      const now = Date.now();
      const timeSinceLastRequest = now - this.lastRequestTime;
      if (timeSinceLastRequest < this.requestDelay) {
        await new Promise(resolve => setTimeout(resolve, this.requestDelay - timeSinceLastRequest));
      }
      this.lastRequestTime = Date.now();

      console.log(`[${new Date().toLocaleTimeString()}] –ü–∞—Ä—Å–∏–º —Å–ª–æ–≤–æ: "${word}"`);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Python –∫–æ–¥–µ
      const encodedWord = encodeURIComponent(word);
      const url = `https://glosbe.com/${fromLang}/${toLang}/${encodedWord}`;
      
      console.log(`–ó–∞–ø—Ä–æ—Å –∫ URL: ${url}`);
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å
      const response = await axios.get(url, {
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
          'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
          'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7,cs;q=0.6',
          'Accept-Encoding': 'gzip, deflate, br',
          'Cache-Control': 'no-cache',
          'Pragma': 'no-cache'
        },
        timeout: 15000,
        maxRedirects: 5
      });

      if (response.status !== 200) {
        throw new Error(`HTTP ${response.status}`);
      }

      // ‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü–∞—Ä—Å–∏–º –°–†–ê–ó–£ –≤ –ø–∞–º—è—Ç–∏, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—è —Ñ–∞–π–ª
      const parsedData = this.parseHtmlContent(response.data, word);
      
      // üóÇÔ∏è –û–ü–¶–ò–û–ù–ê–õ–¨–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–ª–∞–≥ –≤–∫–ª—é—á–µ–Ω (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
      if (this.saveFiles) {
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const filename = `${fromLang}_${toLang}_${word}_${timestamp}.htm`;
        const filepath = path.join(parsedWordsFolder, filename);
        
        try {
          fs.writeFileSync(filepath, response.data, 'utf8');
          console.log(`üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω HTML —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: ${filename}`);
          
          // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
          setTimeout(() => {
            try {
              if (fs.existsSync(filepath)) {
                fs.unlinkSync(filepath);
                console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª –æ—Ç–ª–∞–¥–∫–∏: ${filename}`);
              }
            } catch (delError) {
              console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –æ—Ç–ª–∞–¥–∫–∏: ${delError.message}`);
            }
          }, 10 * 60 * 1000); // 10 –º–∏–Ω—É—Ç
          
        } catch (saveError) {
          console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –æ—Ç–ª–∞–¥–∫–∏: ${saveError.message}`);
        }
      }
      
      return {
        success: true,
        word: word,
        data: parsedData,
        savedFile: this.saveFiles ? '–≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω' : '–Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω'
      };

    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ "${word}":`, error.message);
      return {
        success: false,
        word: word,
        error: error.message
      };
    }
  }

  parseHtmlContent(htmlContent, word) {
    const $ = cheerio.load(htmlContent);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
    const translations = [];
    
    // –ú–µ—Ç–æ–¥ 1: –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
    $('li.translation__item').each((i, elem) => {
      const translationText = $(elem).find('.translation__item__pharse').text().trim();
      if (translationText) {
        translations.push(translationText);
      }
    });
    
    // –ú–µ—Ç–æ–¥ 2: –ú–µ–Ω–µ–µ —á–∞—Å—Ç—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
    if (translations.length === 0) {
      $('#less-frequent-translations-container-0 ul li').each((i, elem) => {
        const text = $(elem).text().trim();
        if (text && !text.includes('Less frequent translations')) {
          translations.push(text);
        }
      });
    }
    
    // –ú–µ—Ç–æ–¥ 3: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
    if (translations.length === 0) {
      $('.translation__translations .translation__item').each((i, elem) => {
        const text = $(elem).text().trim();
        if (text) {
          translations.push(text);
        }
      });
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    const samples = [];
    
    // –ü—Ä–∏–º–µ—Ä—ã –≤ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö
    $('.translation__example').each((i, elem) => {
      const csText = $(elem).find('[lang="cs"]').text().trim();
      const ruText = $(elem).find('.w-1/2.px-1.ml-2').text().trim();
      
      if (csText && ruText) {
        samples.push({
          phrase: csText,
          translation: ruText
        });
      }
    });
    
    // –ü—Ä–∏–º–µ—Ä—ã –≤ –±–ª–æ–∫–µ tmem
    if (samples.length === 0) {
      $('#tmem_first_examples .odd\\:bg-slate-100').each((i, elem) => {
        const csText = $(elem).find('.w-1/2.dir-aware-pr-1').text().trim();
        const ruText = $(elem).find('.w-1/2.dir-aware-pl-1').text().trim();
        
        if (csText && ruText) {
          samples.push({
            phrase: csText,
            translation: ruText
          });
        }
      });
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
    if (samples.length === 0) {
      $('.tmem_first_examples .bg-slate-50').each((i, elem) => {
        const segments = $(elem).find('.segment');
        if (segments.length >= 2) {
          const csText = $(segments[0]).text().trim();
          const ruText = $(segments[1]).text().trim();
          
          if (csText && ruText) {
            samples.push({
              phrase: csText,
              translation: ruText
            });
          }
        }
      });
    }
    
    return {
      word: word,
      translations: [...new Set(translations)].slice(0, 10), // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
      samples: samples.slice(0, 5), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
      source: 'glosbe_direct',
      timestamp: new Date().toISOString()
    };
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞
const glosbeParser = new GlosbeParser();

// API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–ª–æ–≤ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
app.get('/api/translate', async (req, res) => {
  try {
    const { word, from = 'cs', to = 'ru', checkLocal = false } = req.query;
    
    if (!word) {
      return res.status(400).json({ 
        success: false, 
        error: '–°–ª–æ–≤–æ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ' 
      });
    }

    console.log(`API –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥: "${word}" (${from} -> ${to})`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ checkLocal=true
    if (checkLocal) {
      const existingFiles = fs.readdirSync(parsedWordsFolder)
        .filter(file => file.includes(`${from}_${to}_${word}_`) && file.endsWith('.htm'));

      if (existingFiles.length > 0) {
        console.log(`–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π HTML —Ñ–∞–π–ª –¥–ª—è "${word}"`);
        const filepath = path.join(parsedWordsFolder, existingFiles[0]);
        const html = fs.readFileSync(filepath, 'utf8');
        const parsedData = glosbeParser.parseHtmlContent(html, word);
        
        return res.json({
          success: true,
          word: word,
          translations: parsedData,
          fromLocalFile: true
        });
      }
    }

    // –ü–∞—Ä—Å–∏–º —Å —Å–∞–π—Ç–∞ (–ë–ï–ó —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞)
    const result = await glosbeParser.parseWord(word, from, to);
    
    if (result.success) {
      return res.json({
        success: true,
        word: word,
        translations: result.data,
        fromCache: false,
        fileSaved: result.savedFile
      });
    } else {
      return res.status(500).json(result);
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ API:', error);
    return res.status(500).json({ 
      success: false, 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      message: error.message
    });
  }
});

// API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è HTML (–∏–∑ glosbeTranslator.js)
app.post('/api/save-html', upload.single('html'), (req, res) => {
  try {
    const { word, from_lang = 'cs', to_lang = 'ru' } = req.body;
    
    if (!req.file || !word) {
      return res.status(400).json({
        success: false,
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ñ–∞–π–ª HTML –∏ —Å–ª–æ–≤–æ'
      });
    }
    
    const htmlContent = req.file.buffer.toString();
    
    // –ü–∞—Ä—Å–∏–º –°–†–ê–ó–£ –≤ –ø–∞–º—è—Ç–∏, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—è —Ñ–∞–π–ª
    const parsedData = glosbeParser.parseHtmlContent(htmlContent, word);
    
    res.json({
      success: true,
      data: parsedData,
      message: 'HTML –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ –ø–∞–º—è—Ç–∏ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è'
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ HTML:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ HTML',
      message: error.message
    });
  }
});

// API –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
app.post('/api/translate/batch', async (req, res) => {
  try {
    const { words, from = 'cs', to = 'ru' } = req.body;
    
    if (!words || !Array.isArray(words)) {
      return res.status(400).json({
        success: false,
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ words'
      });
    }

    console.log(`–ú–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ ${words.length} —Å–ª–æ–≤`);
    
    const results = [];
    
    for (const word of words) {
      if (word && word.trim()) {
        const result = await glosbeParser.parseWord(word.trim(), from, to);
        results.push(result);
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }
    
    return res.json({
      success: true,
      results: results,
      total: results.length,
      message: '–§–∞–π–ª—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏—Å—å, —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –ø–∞–º—è—Ç–∏'
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –º–∞—Å—Å–æ–≤–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ:', error);
    return res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ',
      message: error.message
    });
  }
});

// API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
app.get('/api/files', (req, res) => {
  try {
    const files = fs.readdirSync(parsedWordsFolder)
      .filter(file => file.endsWith('.htm') || file.endsWith('.html'))
      .map(file => {
        const filepath = path.join(parsedWordsFolder, file);
        const stats = fs.statSync(filepath);
        return {
          filename: file,
          size: stats.size,
          created: stats.mtime,
          word: file.split('_')[2] // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–æ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        };
      });
    
    res.json({
      success: true,
      files: files,
      count: files.length,
      message: files.length === 0 ? '–§–∞–π–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏' : '–ù–∞–π–¥–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã'
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤'
    });
  }
});

// API –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ HTML —Ñ–∞–π–ª–æ–≤
app.get('/api/html-files-count', (req, res) => {
  try {
    const files = fs.readdirSync(parsedWordsFolder)
      .filter(file => file.endsWith('.htm') || file.endsWith('.html'));
    
    res.json({
      success: true,
      count: files.length
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      count: 0,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Ñ–∞–π–ª–æ–≤'
    });
  }
});

// API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
app.delete('/api/files/:filename', (req, res) => {
  try {
    const filename = req.params.filename;
    const filepath = path.join(parsedWordsFolder, filename);
    
    if (fs.existsSync(filepath)) {
      fs.unlinkSync(filepath);
      res.json({ 
        success: true, 
        message: '–§–∞–π–ª —É–¥–∞–ª–µ–Ω' 
      });
    } else {
      res.status(404).json({ 
        success: false, 
        error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }
  } catch (error) {
    res.status(500).json({ 
      success: false, 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞' 
    });
  }
});

// API –¥–ª—è —Ä—É—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
app.delete('/api/files', (req, res) => {
  try {
    cleanupAllFiles();
    res.json({
      success: true,
      message: '–í—Å–µ HTML —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã'
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–æ–≤'
    });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
app.get('/api/health', (req, res) => {
  res.json({
    status: 'ok',
    service: 'flashcards-seznam-api',
    timestamp: new Date().toISOString(),
    version: '1.0.0',
    features: {
      saveFiles: glosbeParser.saveFiles,
      autoCleanup: true,
      memoryParsing: true
    }
  });
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è SPA)
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'build', 'index.html'));
});

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö HTML —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ...');
cleanupAllFiles();

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –∫–∞–∂–¥—ã–π —á–∞—Å
setInterval(cleanupOldFiles, 60 * 60 * 1000);

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ Flashcards Seznam API –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üìÅ –ü–∞–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: ${parsedWordsFolder}`);
  console.log(`üóëÔ∏è –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤: –≤–∫–ª—é—á–µ–Ω–∞`);
  console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ HTML —Ñ–∞–π–ª–æ–≤: ${glosbeParser.saveFiles ? '–≤–∫–ª—é—á–µ–Ω–æ (–æ—Ç–ª–∞–¥–∫–∞)' : '–æ—Ç–∫–ª—é—á–µ–Ω–æ'}`);
  console.log(`üîó API endpoints:`);
  console.log(`   GET  /api/translate?word=—Å–ª–æ–≤–æ&from=cs&to=ru`);
  console.log(`   POST /api/translate/batch`);
  console.log(`   GET  /api/files`);
  console.log(`   DELETE /api/files (–æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ)`);
  console.log(`   GET  /api/health`);
});

module.exports = app;